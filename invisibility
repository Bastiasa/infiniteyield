
local StarterPlayer = game:GetService("StarterPlayer")
local RunService = game:GetService("RunService")
local ContextActionService = game:GetService("ContextActionService")
local Players = game:GetService("Players")

local stepConnection = nil

local player = Players.LocalPlayer 
local camera = workspace.CurrentCamera
local controls = require(player.PlayerScripts:WaitForChild("PlayerModule")):GetControls()

local enabled = false
local targetCharacter = nil

local speed = 50

local U = game:GetService("UserInputService")
local Run = RunService

local camRot = Vector2.new()
local sensi = Vector2.one * 1  -- ajusta sensibilidad

local function isInDynamicThumbstickArea(input)
	local playerGui = player:FindFirstChildOfClass("PlayerGui")
	local touchGui = playerGui and playerGui:FindFirstChild("TouchGui")
	local touchFrame = touchGui and touchGui:FindFirstChild("TouchControlFrame")
	local thumbFrame = touchFrame and touchFrame:FindFirstChild("DynamicThumbstickFrame")
	if not thumbFrame then return false end

	local pos = input.Position
	local a = thumbFrame.AbsolutePosition
	local b = a + thumbFrame.AbsoluteSize
	return (pos.X >= a.X and pos.Y >= a.Y and pos.X <= b.X and pos.Y <= b.Y)
end


U.InputChanged:Connect(function(input)
	
	if not enabled then
		return
	end
	
	local isMouseMovement =  input.UserInputType == Enum.UserInputType.MouseMovement
	local isTouch = input.UserInputType == Enum.UserInputType.Touch
	
	if isTouch or isMouseMovement  then
		
		if isTouch and isInDynamicThumbstickArea(input) then
			return -- ignora rotaciÃ³n al deslizar sobre el joystick
		end
		
		local delta = Vector2.new(input.Delta.X, input.Delta.Y)
		
		camRot -= delta * sensi
	end
end)

Run.PreRender:Connect(function()

	if not enabled then return end
	
	camRot = Vector2.new(camRot.X%360, math.clamp(camRot.Y, -90, 90))
	camera.CFrame = CFrame.new(camera.CFrame.Position) * CFrame.fromOrientation(math.rad(camRot.Y), math.rad(camRot.X), 0) 
	

end)

function SetLocked(locked, character)
	for _, child in pairs(character:GetDescendants()) do
		if child:IsA("BasePart") then
			child.Anchored = locked
		end
	end
end

function MovementUpdate(deltaTime)
	if not targetCharacter or not enabled then return end

	SetLocked(false, targetCharacter)
	targetCharacter.PrimaryPart.CFrame = CFrame.new(0, 5000, 0)
	targetCharacter.PrimaryPart.Velocity = Vector3.zero
	targetCharacter.PrimaryPart.AssemblyLinearVelocity = Vector3.zero
	SetLocked(true, targetCharacter)

	local humanoid = targetCharacter:FindFirstChild("Humanoid")
	if not humanoid then return end



	local motion = controls:GetMoveVector()
	if motion.Magnitude == 0 then return end

	camera.CFrame = camera.CFrame + camera.CFrame.LookVector * speed * deltaTime * -motion.Z
	camera.CFrame = camera.CFrame + camera.CFrame.RightVector * speed * deltaTime * motion.X
	
	camera.Focus = camera.CFrame
	
end

function SetUpInvisibility(character)

	camera.CameraType = Enum.CameraType.Scriptable
	
	local x,y,z = camera.CFrame:ToOrientation()
	
	camRot = Vector2.new(
		math.deg(y), 
		math.deg(x)
	)

	character.PrimaryPart.CFrame = CFrame.new(0,5000,0)

	SetLocked(true, character)

	targetCharacter = character

	stepConnection = RunService.Heartbeat:Connect(MovementUpdate)
	enabled = true
	
	U.MouseBehavior = Enum.MouseBehavior.LockCenter
end

function SetUpVisibility()

	stepConnection:Disconnect()
	stepConnection = nil

	SetLocked(false, targetCharacter)
	targetCharacter.PrimaryPart.CFrame = camera.CFrame

	camera.CameraType = Enum.CameraType.Custom

	enabled = false
	targetCharacter = nil
	
	U.MouseBehavior = Enum.MouseBehavior.Default
end

function SwitchVisibility(inputName, inputState, inputObject)

	if inputState == Enum.UserInputState.Begin then return end

	enabled = not enabled

	local c = player.Character

	if enabled then SetUpInvisibility(c)
	else SetUpVisibility() end


	ContextActionService:SetTitle(
		"switch_visibility",
		enabled and "Visible" or "Invisible"
	)
end


ContextActionService:BindAction(
	"switch_visibility",
	SwitchVisibility,
	true,
	Enum.KeyCode.U
)

ContextActionService:SetTitle(
	"switch_visibility",
	"Invisible"
)

ContextActionService:SetPosition(
	"switch_visibility",
	UDim2.new(-.2, 0, -.2, 0)
)



